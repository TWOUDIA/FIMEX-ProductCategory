// angular.module is a global place for creating, registering and retrieving Angular modules
angular.module('fimex', [
    'ionic',  // ionic framework
    'ngCookies', // inject the angular-cookies module
    'ngMessages', // inject the angular-messages module
    'angular.filter', // inject the angular-filter module
    'pascalprecht.translate',  // inject the angular-translate module
    'tmh.dynamicLocale', // inject the angular-dynamic-locale module
    'toaster', // inject the angularjs-toaster module
    'LocalForageModule', // inject the angular-localforage module
    'fimex.config', 'fimex.controllers', 'fimex.directives', 'fimex.filters', 'fimex.services', 'fimex.info' //customs
])

.run(["AppSettings", "DataLoader", "$ionicPlatform", "$filter", "$timeout", "$interval", "$log", "toaster", "$ionicLoading", function (AppSettings, DataLoader, $ionicPlatform, $filter, $timeout, $interval, $log, toaster, $ionicLoading) {
    $ionicPlatform.ready(function () {
        cordova.plugins.Keyboard.disableScroll(true);
        if (window.StatusBar && !ionic.Platform.isAndroid()) {
            StatusBar.styleLightContent();
        };

        /* TODO: Response with Network Unaccessable ? */
        function alert4Offline() {
            $timeout(function () {
                toaster.pop({
                    type: 'error',
                    body: $filter('translate')('INTERNET_CONNECTION_NONE')
                });
            }, 0);
        }
        document.addEventListener("offline", alert4Offline, false);

        // Check wcCategories every five seconds
        function updatewcCategories() {
            $ionicLoading.show({
                template: '<ion-spinner icon="lines" class="spinner-energized"></ion-spinner>' + $filter('translate')('LOADING_TEXT')
            });

            DataLoader.get(('products/categories?'), 1000).then(function (response) {
                AppSettings.change('wcCategories', response.data.product_categories);
                $ionicLoading.hide();
            }, function (response) {
                $log.error('error', response);
                $ionicLoading.hide();
            });
        }
        $interval(function () {
            if (AppSettings.get('wcCategories').length == 0) {
                updatewcCategories();
            }
        }, 5000);
        
        // Make elements disappear immediately
        window.addEventListener('native.keyboardshow', function () {
            document.body.classList.add('keyboard-open');
        });
    });

    // Exit App
    var countTimerForCloseApp = false;
    $ionicPlatform.registerBackButtonAction(function (e) {
        e.preventDefault();
        if (countTimerForCloseApp) {
            ionic.Platform.exitApp();
        } else {
            countTimerForCloseApp = true;
            // Force to popup immediately
            $timeout(function () {
                toaster.pop({
                    type: 'error',
                    body: $filter('translate')('CONFIRM_BEFORE_APP_EXIT')
                });
            }, 0);
            
            $timeout(function () {
                countTimerForCloseApp = false;
            }, 5000);
        }
        return false;
    }, 101);
}])

.config(["$ionicConfigProvider", "tmhDynamicLocaleProvider", "$translateProvider", "$localForageProvider", "$stateProvider", "$urlRouterProvider", function ($ionicConfigProvider, tmhDynamicLocaleProvider, $translateProvider, $localForageProvider, $stateProvider, $urlRouterProvider) {
    //global configure for tabs position
    $ionicConfigProvider.tabs.position('bottom');

    //locale location
    tmhDynamicLocaleProvider.localeLocationPattern('locales/angular-locale_{{locale}}.js');

    // i18n
    $translateProvider
      .useStaticFilesLoader({
          prefix: 'i18n/',
          suffix: '.json'
      })
      .registerAvailableLanguageKeys(['ar', 'de', 'en', 'es', 'fr', 'pt', 'ru'], {
          'ar': 'ar', 'ar_*': 'ar',
          'de': 'de', 'de_*': 'de',
          'en': 'en', 'en_*': 'en',
          'es': 'es', 'es_*': 'es',
          'fr': 'fr', 'fr_*': 'fr',
          'pt': 'pt', 'pt_*': 'pt',
          'ru': 'ru', 'ru_*': 'ru',
          'zh': 'zh', 'zh_*': 'zh'
      })
      .preferredLanguage('en')
      .fallbackLanguage(['en', 'de', 'es', 'ru'])
      .determinePreferredLanguage()
      .useSanitizeValueStrategy('escapeParameters')
      .useLocalStorage();

    // Setup defaults for LocalForage
    $localForageProvider.config({
        name: 'FIMEXProductCategory', // name of the database and prefix for your data, it is "lf" by default
        storeName: 'prefProducts', // name of the table
        description: 'Let user to keep their preference on FIMEX product(s) on mobile.'
    });

    // Ionic uses AngularUI Router which uses the concept of states
    $stateProvider
    // setup an abstract state for the tabs directive
        .state('tab', {
            url: "/tab",
            abstract: true,
            templateUrl: "templates/tabs.html"
        })
        .state('tab.dash', {
            url: '/dash',
            cache: true,
            views: {
                'tab-dash': {
                    templateUrl: 'templates/tab-dash.html',
                    controller: 'DashCtrl'
                }
            }
        })
        .state('tab.categories', {
            url: '/categories/{categoryLevel}/{categoryId}/{categorySlug}/{categoryName:.*}',
            cache: true,
            views: {
                'tab-categories': {
                    templateUrl: function ($stateParams) {
                        if ($stateParams.categoryLevel == '3') {
                            return 'templates/categories-products.html';
                        } else {
                            return 'templates/tab-categories.html';
                        }
                    },
                    controller: 'CategoriesCtrl'
                }
            }
        })
        .state('tab.search', {
            url: '/search',
            cache: false,
            views: {
                'tab-search': {
                    templateUrl: 'templates/tab-search.html',
                    controller: 'SearchCtrl'
                }
            }
        })
        .state('tab.bookmarks', {
            url: '/bookmarks',
            cache: false,
            views: {
                'tab-bookmarks': {
                    templateUrl: 'templates/tab-bookmarks.html',
                    controller: 'BookmarksCtrl'
                }
            }
        })
        .state('tab.settings', {
            url: '/settings',
            views: {
                'tab-settings': {
                    templateUrl: 'templates/tab-settings.html',
                    controller: 'SettingsCtrl'
                }
            }
        });

    // if none of the above states are matched, use this as the fallback
    $urlRouterProvider.otherwise('/tab/dash');
}]);
angular.module('fimex.config', [])

.constant('AppConfig', {
    appName: 'FIMEX PRODUCT CATEGORIES',
    domainURI: 'https://beta.fimex.com.tw/',
    wcAPIURI: 'wc-api/v3/',
    wcAPIKey: 'ck_e3d52fbb954e57758cc7ea5bdadb6d44d9fd8be3',
    wcAPISecret: 'cs_894c2f79bd330af5eba70473c6a921593139f034',
    wcAPIURIsuffix: 'filter[orderby]=id&filter[order]=ASC&filter[limit]=',
    wcAPIRSlimit: 5,
    wcConnectTimeout: 10000,
    mgAPIName: 'api',
    mgServiceKey: 'key-0c16845e030f782c3acb501cdf07b8a2',
    mgAPIURI: 'https://api.mailgun.net/v3/mg.fimex.com.tw/messages',
    contactForm2Email: 'yannicklin@twoudia.com',
    contactForm2User: 'Support',
    mgConnectTimeout: 10000,
    oriCategories: [{
        "id": 9,
        "name": "Electrical Materials",
        "slug": "electrical-materials",
        "parent": 0,
        "description": "",
        "display": "default",
        "image": "",
        "count": 0,
        "sublevels": 2
    }, {
        "id": 10,
        "name": "Electrical Materials - American Category",
        "slug": "electrical-materials-aa",
        "parent": 0,
        "description": "",
        "display": "default",
        "image": "",
        "count": 0,
        "sublevels": 2
    }, {
        "id": 11,
        "name": "Wiring Devices",
        "slug": "wiring-devices",
        "parent": 0,
        "description": "",
        "display": "default",
        "image": "",
        "count": 0,
        "sublevels": 3
    }]
});
angular.module('fimex.services', [])

.factory('DataLoader', ["AppSettings", "$http", function (AppSettings, $http) {
    return {
        get: function ($term, $limit) {
            var result = $http({
                method: 'GET',
                url: AppSettings.getURI($term, $limit) + '&consumer_key='+ AppSettings.get('wcAPIKey')+ '&consumer_secret=' + AppSettings.get('wcAPISecret'),
                timeout: AppSettings.get('wcConnectTimeout')
            });
            return result;
        }
    }
}])

.factory('PHPJSfunc', function () {
    return {
        urlencode: function ($uri) {
            $uri = ($uri + '').toString();

            var result = encodeURIComponent($uri)
              .replace(/!/g, '%21')
              .replace(/'/g, '%27')
              .replace(/\(/g, '%28')
              .replace(/\)/g, '%29')
              .replace(/\*/g, '%2A')
              .replace(/%20/g, '+');

            return result;
        }
    }
})

.service('BookMarks', ["$localForage", "$log", function ($localForage, $log) {
    var lf = $localForage.instance();

    return {
        countos: function(){
            return lf.length().then(function (value) {
                $log.debug(value);
                return value;
            });
        },
        count: function () {
            return lf.length();
        },
        check: function($id){
            return lf.getItem($id);
        },
        add: function($id, $product){
            lf.setItem($id, {
                name: $product.title,
                id: $product.id,
                thumbnail: $product.featured_src,
                category: $product.categories[0],
                path: $product.permalink
            }).then(function () {
                $log.debug('LocalForage Add #:' + $id);
            });
        },
        drop: function ($id) {
            lf.removeItem($id).then(function () {
                $log.debug('LocalForage Remove #:' + $id);
            });
        },
        getall: function(){
            var objArray = [];
            lf.iterate(function (value, key) {
                objArray.push(value);}
                ).then(function () { });
            return objArray;
        }
    }
}])

.service('ModalHandler_product', ["BookMarks", "$ionicModal", "$filter", "$ionicSlideBoxDelegate", "$localForage", function (BookMarks, $ionicModal, $filter, $ionicSlideBoxDelegate, $localForage) {
    return {
        init: function ($sce) {
            $ionicModal.fromTemplateUrl('templates/product-modal.html', {
                scope: $sce,
                animation: 'slide-in-up'
            }).then(function (modal) {
                $sce.modal = modal;
                $sce.detail = null;
                $sce.detailImg = null;
            });

            $sce.openModal = function ($data) {
                $sce.detail = $data;
                $sce.detailImg = $filter('unique')($sce.detail.images, 'src');
                BookMarks.check($data.id).then(function (result) {
                    $sce.detail.bookmarked = (angular.isObject(result)) ? true : false;
                });
                $sce.detail.bookmarked = (BookMarks.check($data.id)) ? true : false;
                $ionicSlideBoxDelegate.update();
                $sce.modal.show();
            };
            $sce.closeModal = function () {
                $sce.modal.hide();
            };
            $sce.$on('$destroy', function () {
                $sce.modal.remove();
            });

            //Bookmark Processing
            $sce.triggerBookmark = function ($product) {
                BookMarks.check($product.id).then(function(result) {
                    if (angular.isObject(result)) {
                        BookMarks.drop($product.id);
                    }else{
                        BookMarks.add($product.id, $product);
                    }
                });
                $sce.detail.bookmarked = !$sce.detail.bookmarked;    
            };
        }
    }
}])

.factory('EmailSender', ["AppSettings", "$http", "$log", function (AppSettings, $http, $log) {
    return {
        send: function ($mail) {
            $http({
                method: 'POST',
                url: AppSettings.get('mgAPIURI'),
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',
                    'Authorization': 'Basic ' + AppSettings.getAuthPhrase(AppSettings.get('mgAPIName'), AppSettings.get('mgServiceKey')),
                },
                transformRequest: function (obj) {
                    var str = [];
                    for (var p in obj) {
                        if (obj[p].length > 0) { str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p])); }
                    }
                    return str.join('&');
                },
                data: $mail,
                timeout: AppSettings.get('mgConnectTimeout')
            }).then(
            function success() {
                $log.debug('successful email send.');
            }, function error() {
                $log.debug('error sending email.');
            });
            return null;
        }
    }
}])

.factory('AppSettings', ["AppConfig", "$translate", "tmhDynamicLocale", function (AppConfig, $translate, tmhDynamicLocale) {
    var savedData = AppConfig;
    savedData.wcCategories = [];
    savedData.appFIMEXCategoriesRS = "";

    function setLanguageURI(value) {
        switch (value) {
            case 'en':
                savedData.languageURI = '';
                break;
            case 'zh':
                savedData.languageURI = 'zh-hant/';
                break;
            default:
                savedData.languageURI = value + '/';
        }
    }

    // Initial Language and LanguageURI
    savedData.language = $translate.use();
    setLanguageURI(savedData.language);

    return {
        change: function ($item, value) {
            savedData[$item] = value;
            if ($item == 'language') {
                // Set Language URI
                setLanguageURI(value);
                // Apply Translate
                $translate.use(value);
                tmhDynamicLocale.set(value);
            }
        },
        get: function ($item) {
            return savedData[$item];
        },
        getURI: function ($term, $limit) {
            //TODO: set languageURI fixed to null, for the only ENGLISH language for products & categories. 10 JAN 16
            savedData.languageURI = '';

            ($limit == 0) ? ($limit = savedData.wcAPIRSlimit) : ($limit = $limit);
            if (!$term) {
                return savedData.domainURI + savedData.languageURI + savedData.wcAPIURI + '?' + savedData.wcAPIURIsuffix + $limit;
            } else {
                return savedData.domainURI + savedData.languageURI + savedData.wcAPIURI + $term + savedData.wcAPIURIsuffix + $limit;
            }
        },
        getAuthPhrase: function ($name, $key) {
            return btoa($name + ':' + $key);
        }
    };
}]);
angular.module('fimex.controllers', [])

.controller('DashCtrl', ["Notes", "$scope", "$filter", function (Notes, $scope, $filter) {
    var NotesRS = Notes.all();
    $scope.notesNormal = $filter('filter')(NotesRS, { top: 0 });
    $scope.notesTop = $filter('filter')(NotesRS, { top: 1 });
    $scope.notesCount = NotesRS.length;
    $scope.today = new Date();
}])


.controller('CategoriesCtrl', ["AppSettings", "DataLoader", "ModalHandler_product", "$scope", "$stateParams", "$log", "$filter", "$ionicLoading", function(AppSettings, DataLoader, ModalHandler_product, $scope, $stateParams, $log, $filter, $ionicLoading) {
    $ionicLoading.show({
        template: '<ion-spinner icon="lines" class="spinner-energized"></ion-spinner>' + $filter('translate')('LOADING_TEXT')
    });
    $scope.RSempty = false;
    var nextPage = 1;
    $scope.able2Loadmore = 0;

    var CategoriesSplitTerm = ' >> ';
    $scope.RSitemURI = '#/tab/categories/' + (parseInt($stateParams.categoryLevel) + 1);
    var PretitleSub = AppSettings.get('appFIMEXCategoriesRS');
    var arrPrevtitleSub = PretitleSub.split(CategoriesSplitTerm, 2);
    $scope.showCount = 0;

    switch (parseInt($stateParams.categoryLevel)) {
        case 0: // Main Categories
            $scope.loadResult = function () {
                $scope.categories = AppSettings.get('oriCategories');
                $ionicLoading.hide();
            }

            break;
        case 3: // Products List
            $scope.loadResult = function () {
                DataLoader.get(('products?filter[category]=' + $stateParams.categorySlug + '&'), 0).then(function (response) {
                    if (response.data.products.length == 0) {
                        $scope.products = null;
                        $scope.RSempty = true;
                    } else {
                        $scope.products = response.data.products;
                        if (response.data.products.length == AppSettings.get('wcAPIRSlimit')) {
                            nextPage++;
                            $scope.able2Loadmore = 1;
                        }
                    }
                    $ionicLoading.hide();
                }, function (response) {
                    $log.error('error', response);
                    $ionicLoading.hide();
                    $scope.RSempty = true;
                });
            }
            PretitleSub = arrPrevtitleSub[0] + CategoriesSplitTerm + arrPrevtitleSub[1];

            break;
        case 2: // The bottom subcategories, which has direct product counts, would execute the "default section" also
            $scope.showCount = 1;
        default: // Subcategories
            $scope.loadResult = function () {
                $scope.categories = $filter('filter')(AppSettings.get('wcCategories'), { parent: parseInt($stateParams.categoryId) }, true);
                if ($scope.categories.length == 0) {
                    $scope.categories = null;
                    $scope.RSempty = true;
                }
                $ionicLoading.hide();
            }
            PretitleSub = (parseInt($stateParams.categoryLevel) > 1) ? arrPrevtitleSub[0] : '';

            break;
    }

    if (parseInt($stateParams.categoryLevel) == 0) {
        $scope.titleSub = '';
        AppSettings.change('appFIMEXCategoriesRS', '');
    } else {
        $scope.titleSub = (PretitleSub == '') ? $filter('unescapeHTML')($stateParams.categoryName) : (PretitleSub + CategoriesSplitTerm + $filter('unescapeHTML')($stateParams.categoryName));
        AppSettings.change('appFIMEXCategoriesRS', $scope.titleSub);
    }
    $scope.loadResult();

    $scope.loadMore = function () {
        $ionicLoading.show({
            template: '<ion-spinner icon="lines" class="spinner-energized"></ion-spinner>' + $filter('translate')('LOADING_MORE_TEXT')
        });
        $scope.able2Loadmore = 0;

        DataLoader.get(('products?filter[category]=' + $stateParams.categorySlug + '&page=' + nextPage), 0).then(function (response) {
            if (response.data.products.length > 0) {
                $scope.products = $scope.products.concat(response.data.products);
                if (response.data.products.length == AppSettings.get('wcAPIRSlimit')) {
                    nextPage++;
                    $scope.able2Loadmore = 1;
                }
            }
            $ionicLoading.hide();
            $scope.$broadcast('scroll.infiniteScrollComplete');
        }, function (response) {
            $log.error('error', response);
            $ionicLoading.hide();
            $scope.$broadcast('scroll.infiniteScrollComplete');
        });
    };

    // Modal for Product Detal
    ModalHandler_product.init($scope);
}])


.controller('SearchCtrl', ["AppSettings", "ModalHandler_product", "PHPJSfunc", "DataLoader", "$scope", "$log", "$filter", "$ionicLoading", function (AppSettings, ModalHandler_product, PHPJSfunc, DataLoader, $scope, $log, $filter, $ionicLoading) {
    $scope.search = {};
    var nextPage = 1;
    $scope.able2Loadmore = 0;

    $scope.cleanResult = function () {
        $scope.products = null;
        $scope.RSempty = false;
    }

    // Clean All
    $scope.cleanSearch = function () {
        $scope.search.term = '';
        $scope.cleanResult();
    };

    // Start Search
    $scope.doSearch = function () {
        if (!$scope.search.term) return;
        cordova.plugins.Keyboard.close();
        $scope.loadResult();
    };

    $scope.loadResult = function () {
        $ionicLoading.show({
            template: '<ion-spinner icon="lines" class="spinner-energized"></ion-spinner>' + $filter('translate')('LOADING_TEXT')
        });
        $scope.cleanResult();

        DataLoader.get(('products?filter[q]=' + PHPJSfunc.urlencode($scope.search.term) + '&'), 0).then(function (response) {
            if (response.data.products.length == 0) {
                $scope.products = null;
                $scope.RSempty = true;
            } else {
                $scope.products = response.data.products;
                if (response.data.products.length == AppSettings.get('wcAPIRSlimit')) {
                    nextPage++;
                    $scope.able2Loadmore = 1;
                }
            }
            $ionicLoading.hide();
        }, function (response) {
            $log.error('error', response);
            $ionicLoading.hide();
            $scope.RSempty = true;
        });
    }

    $scope.loadMore = function () {
        $ionicLoading.show({
            template: '<ion-spinner icon="lines" class="spinner-energized"></ion-spinner>' + $filter('translate')('LOADING_MORE_TEXT')
        });
        $scope.able2Loadmore = 0;

        DataLoader.get(('products?filter[q]=' + PHPJSfunc.urlencode($scope.search.term) + '&page=' + nextPage), 0).then(function (response) {
            if (response.data.products.length > 0) {
                $scope.products = $scope.products.concat(response.data.products);
                if (response.data.products.length == AppSettings.get('wcAPIRSlimit')) {
                    nextPage++;
                    $scope.able2Loadmore = 1;
                }
            }
            $ionicLoading.hide();
            $scope.$broadcast('scroll.infiniteScrollComplete');
        }, function (response) {
            $log.error('error', response);
            $ionicLoading.hide();
            $scope.$broadcast('scroll.infiniteScrollComplete');
        });
    };

    // Modal for Product Detal
    ModalHandler_product.init($scope);
}])


.controller('BookmarksCtrl', ["BookMarks", "$scope", "$ionicPopup", function (BookMarks, $scope, $ionicPopup) {
    $scope.RSempty = false;
    $scope.bookmarks = null;
    $scope.RScount = 0;

    BookMarks.count().then(function (value) {
        console.debug('# for BookMarks is ' + value);
        if (value > 0) {
            $scope.RScount = value;
            $scope.bookmarks = BookMarks.getall();
        } else {
            $scope.RSempty = true;
        }
    });

    $scope.gotoSearch = function () { };
    $scope.openEnquiry = function () { };

    $scope.dropBookmark = function ($target) {
        var confirmPopup = $ionicPopup.confirm({
            title: 'Consume Ice Cream',
            template: 'Are you sure you want to eat this ice cream?'
        });
        confirmPopup.then(function (res) {
            if (res) {
                BookMarks.drop($target.id);
                $scope.bookmarks = BookMarks.getall();
            } else {
                console.log('You are not sure');
            }
        });
    }
}])


.controller('SettingsCtrl', ["AppSettings", "EmailSender", "$scope", "$ionicHistory", "$translate", "$filter", "toaster", function (AppSettings, EmailSender, $scope, $ionicHistory, $translate, $filter, toaster) {
    $scope.forms = {};
    $scope.ctForm = {};
    $scope.settings = {
        language: $translate.use()
    }

    // Change Lanuage and auto redirect to dash tab
    $scope.$watch('settings.language', function () {
        if ($scope.settings.language != AppSettings.get('language')) {
            AppSettings.change('language', $scope.settings.language);
            $ionicHistory.clearCache();
            $ionicHistory.clearHistory();
            AppSettings.change('wcCategories', []);
        }
    });

    // contact form submitting
    $scope.formSubmit = function () {
        var mailObj = {
            'from': $scope.ctForm.ctName + ' <' + $scope.ctForm.ctEmail + '>',
            'to': AppSettings.get('contactForm2User') + ' <' + AppSettings.get('contactForm2Email') + '>',
            'cc': '',
            'bcc': '',
            'subject': 'Message sent via Mobile APP - ' + AppSettings.get('appName') + ', ' + $filter('date')(Date.now(), 'yyyy-MM-dd HH:mm Z'),
            'html': '<table style="border: 1px dashed black; border-collapse: collapse;">' + '<caption>' + AppSettings.get('appName') + '</caption>' +
                '<tfoot style="color: red;"><tr><td style="border: 1px dashed black; padding: 5px;">Time</td><td style="border: 1px dashed black; padding: 5px;">' + $filter('date')(Date.now(), 'yyyy-MM-dd HH:mm Z') + '</td></tr>' +
                '<tr><td style="border: 1px dashed black; padding: 5px;">SPEC</td><td style="border: 1px dashed black; padding: 5px;">Platform: ' + device.platform + ', Version: ' + device.version + ', Manufacturer: ' + device.manufacturer + ', Model: ' + device.model + ', UUID: ' + device.uuid + '</td></tr></tfoot>' +
                '<tbody><tr><td style="border: 1px dashed black; padding: 5px;">Name</td>' + '<td style="border: 1px dashed black; padding: 5px;">' + $scope.ctForm.ctName + '</td></tr>' +
                '<tr><td style="border: 1px dashed black; padding: 5px;">Email</td>' + '<td style="border: 1px dashed black; padding: 5px;">' + $scope.ctForm.ctEmail + '</td></tr>' +
                '<tr><td style="border: 1px dashed black; padding: 5px;">Message</td>' + '<td style="border: 1px dashed black; padding: 5px;">' + $scope.ctForm.ctMessage + '</td></tr></tbody></table>',
            'text': 'TEXT VERSION: ' + $scope.ctForm.ctMessage
        };
        EmailSender.send(mailObj);
        toaster.pop({
            type: 'info',
            body: $filter('translate')('ALERT_MAIL_SENT', { name: $scope.ctForm.ctName })
        });

        //reset Form
        $scope.ctForm = {};
        $scope.forms.contactForm.$setPristine();
    };
}]);

angular.module('fimex.directives', [])

// Set up for grouped Radio Buttons, used in Language Selection
.directive('gpRadio', function () {
    return {
        restrict: 'AE',
        require: 'ngModel',
        scope: {
            model: '=ngModel',
            value: '=gpRadio'
        },
        link: function (scope, element, attrs, ngModelCtrl) {
            element.addClass('button');
            element.on('click', function (e) {
                scope.$apply(function () {
                    ngModelCtrl.$setViewValue(scope.value);
                });
            });

            scope.$watch('model', function (newVal) {
                element.removeClass('button-positive');
                if (newVal === scope.value) {
                    element.addClass('button-positive');
                }
            });
        }
    };
})

// Handling Keyboard KeyIn Event; especially for search
.directive('keyInput', function () {
    return function (scope, element, attrs) {
        element.bind("keydown keypress", function (event) {
            if (event.which === 13) {
                scope.$apply(function () {
                    scope.$eval(attrs.keyInput);
                });
                event.preventDefault();
            }
        });
    };
})

// Handling Element to hide while Keyboard shows up
.directive('keyboardHide', function () {
    return {
        restrict: 'A',
        link: function (scope, element, attrs) {
            scope.$watch('native.keyboardshow', function () {
                element.addClass('hide');
            });
            scope.$watch('native.keyboardhide', function () {
                element.removeClass('hide');
            });
        }
    };
});
angular.module('fimex.filters', [])

.filter('partRemove', ["$sce", function ($sce) {
    return function (original, tag) {
        var htmlObject = document.createElement('div');
        htmlObject.innerHTML = original;

        var parts = htmlObject.getElementsByTagName(tag);
        for (var i = parts.length; i > 0 ; i--) {
            parts[i - 1].parentNode.removeChild(parts[i - 1]);
        }

        return $sce.trustAsHtml(htmlObject.outerHTML);
    }
}])

.filter('unicode', ["$sce", function ($sce) {
    return function (x) {
        return $sce.trustAsHtml(x);
    }
}])

.filter('unescapeHTML', function () {
    var entityMap = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': '&quot;',
        "'": '&#39;',
        "/": '&#x2F;'
    };

    return function (str) {
        angular.forEach(entityMap, function (value, key) {
            str = String(str).replace(new RegExp(value, 'gi'), key);
        })
        return str;
    }
});
angular.module('fimex.info', [])

.factory('Notes', function () {
    var objNotes = [{
                "id": 0,
                "top": 0,
                "title": 'NOTES_20160107_TITLE',
                "content": 'NOTES_20160107_CONTENT'
            }, {
                "id": 1,
                "top": 0,
                "title": 'NOTES_20160108_TITLE',
                "content": 'NOTES_20160108_CONTENT'
        }, {
                "id": 2,
                "top": 1,
                "title": 'NOTES_20160109_TITLE',
                "content": 'NOTES_20160109_CONTENT'
    }];
    
    return {
        all: function() {
            return objNotes;
        },
        get: function ($noteId) {
            for (var i = 0; i < objNotes.length; i++) {
                if (objNotes[i].id === parseInt($noteId)) {
                    return objNotes[i];
                }
            }
            return null;
        }
    };
});